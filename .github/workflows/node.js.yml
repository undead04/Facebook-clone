# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI/CD FacebookClone

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      NODE_ENV: production

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm test || true
    
    - name: Setup environment
      run: |
        cp .env.production .env
        # Replace placeholder values with GitHub secrets
        sed -i "s|\$JWT_SECRET|${{ secrets.JWT_SECRET }}|g" .env
        sed -i "s|\$EMAIL_USER|${{ secrets.EMAIL_USER }}|g" .env
        sed -i "s|\$EMAIL_PASSWORD|${{ secrets.EMAIL_PASSWORD }}|g" .env
        sed -i "s|\$FIREBASE_STORAGE_BUCKET|${{ secrets.FIREBASE_STORAGE_BUCKET }}|g" .env
        
        # Add MongoDB credentials
        sed -i "s|admin:password|${{ secrets.MONGODB_USERNAME }}:${{ secrets.MONGODB_PASSWORD }}|g" .env
        
        # Add RabbitMQ credentials
        sed -i "s|admin:password@localhost:5672|${{ secrets.RABBITMQ_USERNAME }}:${{ secrets.RABBITMQ_PASSWORD }}@localhost:5672|g" .env
        
    - name: Start Docker containers for database services
      run: |
        # Update docker-compose environment
        sed -i "s|MONGO_INITDB_ROOT_USERNAME=admin|MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGODB_USERNAME }}|g" docker-compose.yml
        sed -i "s|MONGO_INITDB_ROOT_PASSWORD=password|MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGODB_PASSWORD }}|g" docker-compose.yml
        sed -i "s|RABBITMQ_DEFAULT_USER=admin|RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_USERNAME }}|g" docker-compose.yml
        sed -i "s|RABBITMQ_DEFAULT_PASS=password|RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_PASSWORD }}|g" docker-compose.yml
        
        # Stop and remove existing containers
        docker-compose down
        
        # Start the database services
        docker-compose up -d mongodb redis rabbitmq
        
        # Wait for databases to be ready
        echo "Waiting for MongoDB to be ready..."
        sleep 10
        echo "Waiting for Redis to be ready..."
        sleep 5
        echo "Waiting for RabbitMQ to be ready..."
        sleep 10
        
        # Check database connections
        docker ps
    
    - name: Database migration and seed (if needed)
      run: |
        # Run migrations or initialize database if needed
        echo "Initializing databases if needed"
        node dist/scripts/db-init.js || true
    
    - name: Deploy application
      run: |
        # Stop the existing PM2 process if it exists
        pm2 stop facebook-clone || true
        pm2 delete facebook-clone || true
        
        # Start the application with PM2
        pm2 start npm --name "facebook-clone" -- start
        pm2 save
    
    - name: Monitor deployment
      run: |
        echo "Application deployed successfully"
        pm2 status
