name: Node.js CI/CD FacebookClone

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [22.x]

    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run tests
      run: npm test || true

    - name: Setup environment file
      run: |
        cp .env.production .env
        node -e "
          const fs = require('fs');
          let env = fs.readFileSync('.env', 'utf8');
          env = env
            .replace('\$JWT_SECRET', '${{ secrets.JWT_SECRET }}')
            .replace('\$EMAIL_USER', '${{ secrets.EMAIL_USER }}')
            .replace('\$EMAIL_PASSWORD', '${{ secrets.EMAIL_PASSWORD }}')
            .replace('\$FIREBASE_STORAGE_BUCKET', '${{ secrets.FIREBASE_STORAGE_BUCKET }}')
            .replace('\$AWS_BUCKET_ACESS_KEY', '${{ secrets.AWS_BUCKET_ACESS_KEY }}')
            .replace('\$AWS_BUCKET_SECRET_KEY', '${{ secrets.AWS_BUCKET_SECRET_KEY }}')
            .replace('\$AWS_KEY_GROUP', '${{ secrets.AWS_KEY_GROUP }}')
            .replace('\$AWS_PRIVATE_KEY', '${{ secrets.AWS_PRIVATE_KEY }}');
          fs.writeFileSync('.env', env);
        "
    - name: Start Docker services
      run: |
        docker-compose down || true
        docker-compose up -d mongodb redis rabbitmq
        echo "⏳ Waiting for services..."
        sleep 20
        docker ps

    - name: Database migration/init
      run: |
        node dist/src/scripts/db-init.js || echo "No migration script or already initialized"

    - name: Start application
      run: |
        pm2 stop facebook-clone || true
        pm2 delete facebook-clone || true
        pm2 start npm --name "facebook-clone" -- start
        pm2 save

    - name: Monitor PM2 status
      run: |
        echo "✅ Application deployed successfully"
        pm2 status
