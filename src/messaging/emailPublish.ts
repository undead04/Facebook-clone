import { connectRabbitMQ } from "../databases/init.rabbitmq";
import { SendEmailOptions } from "../services/email.service";

export const emailPublish = async ({ to, subject, html }: SendEmailOptions) => {
  try {
    const { channel } = await connectRabbitMQ();

    // C·∫•u h√¨nh t√™n exchange, queue, routing key
    const emailExchange = "email-exchange";
    const emailRoutingKey = "email.routing.key";

    const emailQueue = "emailQueue";

    const emailDLXExchange = "email-DLX-exchange";
    const emailDLXRoutingKey = "email.DLX.routing.key";
    const emailDLXQueue = "emailDLXQueue";

    const retryExchange = "email-retry-exchange";
    const retryRoutingKey = "email.retry.routing.key";
    const retryQueue = "emailRetryQueue";

    // 1. T·∫°o exchange retry ƒë·ªÉ x·ª≠ l√Ω retry sau khi th·∫•t b·∫°i
    await channel.assertExchange(retryExchange, "direct", { durable: true });

    await channel.assertQueue(retryQueue, {
      durable: true,
      deadLetterExchange: emailExchange, // quay l·∫°i queue ch√≠nh sau retry
      deadLetterRoutingKey: emailRoutingKey,
      messageTtl: 5000, // ch·ªù 5s r·ªìi quay l·∫°i
    });

    await channel.bindQueue(retryQueue, retryExchange, retryRoutingKey);

    // 2. T·∫°o exchange ch√≠nh (topic ho·∫∑c direct ƒë·ªÅu ƒë∆∞·ª£c)
    await channel.assertExchange(emailExchange, "direct", { durable: true });

    // 3. T·∫°o queue ch√≠nh + c·∫•u h√¨nh DLX n·∫øu fail
    await channel.assertQueue(emailQueue, {
      durable: true,
      deadLetterExchange: emailDLXExchange,
      deadLetterRoutingKey: emailDLXRoutingKey,
    });

    await channel.bindQueue(emailQueue, emailExchange, emailRoutingKey);

    // 4. T·∫°o exchange + queue cho DLX (log l·ªói, ph√¢n t√≠ch, v.v.)
    await channel.assertExchange(emailDLXExchange, "direct", { durable: true });

    await channel.assertQueue(emailDLXQueue, { durable: true });
    await channel.bindQueue(emailDLXQueue, emailDLXExchange, emailDLXRoutingKey);

    // 5. G·ª≠i message ƒë·∫øn exchange ch√≠nh
    const message = { to, subject, html };

    console.log("üì§ Sending email to queue...");
    await channel.publish(
      emailExchange,
      emailRoutingKey,
      Buffer.from(JSON.stringify(message)),
      {
        expiration: "10000", // TTL: 10s
        persistent: true,
      }
    );

    setTimeout(() => {
      channel.close();
    }, 500);
  } catch (error) {
    console.error("‚ùå Error while publishing email:", error);
    throw error;
  }
};
