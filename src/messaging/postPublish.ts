import { connectRabbitMQ } from "../databases/init.rabbitmq";
export interface IPostPublishOption {
  userId: string;
  content: string;
  imagesName: string;
  typePost: string;
}
export const postPublish = async (data: IPostPublishOption) => {
  try {
    const { channel } = await connectRabbitMQ();
    const postQueue = "postQueue";
    const postExchange = "post-exchange";
    const postRoutingKey = "post.routing.key";

    const postExchangeDLX = "post-exchange-dlx";
    const postDLXRoutingKey = "post-dlx.routing.key";

    const retryQueue = "postRetryQueue";
    const retryExchange = "post-retry-exchange";
    const retryRoutingKey = "post.retry.routing.key";

    // 1. T·∫°o exchange retry ƒë·ªÉ x·ª≠ l√Ω retry sau khi th·∫•t b·∫°i
    await channel.assertExchange(retryExchange, "direct", { durable: true });
    await channel.assertQueue(retryQueue, {
      durable: true,
      deadLetterExchange: postExchange, // quay l·∫°i queue ch√≠nh sau retry
      deadLetterRoutingKey: postRoutingKey,
      messageTtl: 5000, // ch·ªù 5s r·ªìi quay l·∫°i
    });

    await channel.bindQueue(retryQueue, retryExchange, retryRoutingKey);
    // 1. T·∫°o exchange ch√≠nh v√† DLX
    await channel.assertExchange(postExchange, "direct", { durable: true });
    await channel.assertExchange(postExchangeDLX, "direct", { durable: true });

    // 2. T·∫°o queue ch√≠nh v√† c·∫•u h√¨nh TTL + DLX
    await channel.assertQueue(postQueue, {
      durable: true,
      deadLetterExchange: postExchangeDLX,
      deadLetterRoutingKey: postDLXRoutingKey,
    });

    // 4. Bind queue ch√≠nh v√†o exchange ch√≠nh
    await channel.bindQueue(postQueue, postExchange, postRoutingKey);

    // 6. G·ª≠i message v√†o exchange (not sendToQueue)
    await channel.publish(
      postExchange,
      postRoutingKey,
      Buffer.from(JSON.stringify(data)),
      {
        persistent: true,
        expiration: "10000", // Optional TTL t·∫°i message (n·∫øu kh√¥ng set ·ªü queue)
      }
    );

    console.log("üì§ G·ª≠i upload event th√†nh c√¥ng");

    setTimeout(() => {
      channel.close();
    }, 500);
  } catch (error) {
    console.error("‚ùå Producer upload error:", error);
    throw error;
  }
};
